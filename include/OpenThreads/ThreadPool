/* -*-c++-*- OpenThreads library, Copyright (C) 2002 - 2007  The Open Thread Group
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/


//
// ThreadPool - Classes to manage a thread pool
// ~~~~~~~~~~
//

#ifndef _OPENTHREADS_THREADPOOL_
#define _OPENTHREADS_THREADPOOL_

#include <OpenThreads/Thread>
#include <OpenThreads/Condition>
#include <map>
#include <list>

#ifdef _WIN32
#pragma warning( push )
#pragma warning( disable: 4251 )
#endif

namespace OpenThreads {

class OPENTHREAD_EXPORT_DIRECTIVE ThreadPool;

class OPENTHREAD_EXPORT_DIRECTIVE WorkerThread : public Thread {

public:

	WorkerThread();
	virtual ~WorkerThread();

	void queue(void* task);

	void run();

	void stop(bool finishTasks);

protected:
	virtual void init() {}
	virtual void executeTask(void* task) {}

protected:
	Condition _condition;
	Mutex _mutex;

	typedef std::list<void*> Tasks;
	Tasks _tasks;

	enum Flag
	{
		STOPPING			= 1,
		STOP_AFTER_TASKS	= 2,
	};

private:
	bool shouldStop();
	
private:
	friend class ThreadPool;
	void setPool(ThreadPool* pool);
	ThreadPool* _pool;
	unsigned int _flags;
};

class OPENTHREAD_EXPORT_DIRECTIVE ThreadPool {

public:

	ThreadPool();
	virtual ~ThreadPool();

	int add(WorkerThread* worker);
	void stop();

private:
	bool _stopping;
	Mutex _mutex;

	typedef std::map<int, WorkerThread*> Workers;
	Workers _workers;

	// Helper for stop()
	static void waitForTermination(Workers& workers, unsigned int timeout);

private:
	friend class WorkerThread;
	void workerEnded(WorkerThread* worker);
};

}

#ifdef _WIN32
#pragma warning( pop )
#endif

#endif // !_OPENTHREADS_THREADPOOL_
